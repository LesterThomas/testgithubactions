name: Auto label PR
on: pull_request

jobs:
  diff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // console.log(context.payload.pull_request.number)
            // console.log(context.payload.pull_request.commits)
            const pull_request = await github.request(context.payload.pull_request.url)
            //console.log({pull_request: pull_request.data})
            console.log({pull_request: pull_request.data.html_url})
            //
            // For each issue there may be a CONNECTED_EVENT and/or a DISCONNECTED_EVENT on the timeline and may be 
            // mentioned with a # in the pr body. We need to
            // count for each event type and if the total is Odd, the issue is connected and if Even it is not connected.
            // query the timeline for this pull request. 
            const graphql_response = await github.graphql('{ resource(url: "' + pull_request.data.html_url + '") { ... on PullRequest { timelineItems(itemTypes: [CONNECTED_EVENT, DISCONNECTED_EVENT], first: 100) { nodes { ... on ConnectedEvent { id subject { ... on Issue { number }}} ... on DisconnectedEvent { id subject { ... on Issue { number }}}}}}}}')
            var linked_issues={}
            graphql_response.resource.timelineItems.nodes.forEach(function (node, index) {
              const issue_no = node.subject.number
              //console.log({issue_no: issue_no})
              if (linked_issues[issue_no]){
                delete linked_issues[issue_no]
              } else {
                linked_issues[issue_no] = true
              }
            })
            // query for the body
            //console.log({pull_request: pull_request.data.body})
            const regex = /#([0-9]+)/g;
            const found = pull_request.data.body.match(regex);
            found.forEach(function (item, index) {
              var issue_no=item.substring(1)            
              //console.log({issue_no: issue_no})
              if (linked_issues[issue_no]){
                delete linked_issues[issue_no]
              } else {
                linked_issues[issue_no] = true
              }
            })
            console.log({ linked_issues: linked_issues})
            //const commit = await github.request(url)
            //console.log(commit.data)
            const repository_url = pull_request.head.repo.url
            console.log(repository_url)
            linked_issues.forEach( async function (item, index) {
              console.log(repository_url + '/' + index)
              const issue = await github.request(repository_url + '/' + index)
              linked_issues[index] = issue
            })
            console.log({ linked_issues: linked_issues})

